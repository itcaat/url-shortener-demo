name: Build All Services

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the images'
        required: false
        default: 'manual'

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  detect-services:
    name: Detect all services
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find all services with Dockerfile
        id: set-matrix
        run: |
          # Находим все директории с Dockerfile
          SERVICES=$(find . -maxdepth 2 -name "Dockerfile" -type f | sed 's|^\./||' | sed 's|/Dockerfile$||' | jq -R -s 'split("\n") | map(select(length > 0))' | jq -c .)
          echo "All services: $SERVICES"
          echo "matrix={\"service\":$SERVICES}" >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [detect-services]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.detect-services.outputs.matrix) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

      - name: Print image info
        run: |
          echo "✅ Successfully built and pushed ${{ matrix.service }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
